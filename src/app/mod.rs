use pyo3::prelude::*;

mod assign_dictionary_record;
pub mod c_application;
mod c_attributes;
mod c_comp_info;
mod c_const;
mod c_context;
mod c_context_dictionary;
mod c_declarations;
mod c_dictionary;
mod c_dictionary_record;
mod c_enum_info;
mod c_enum_item;
mod c_exp;
mod c_field_info;
mod c_file;
mod c_file_assignment;
mod c_file_assignment_dictionary;
mod c_file_declarations;
mod c_function;
mod c_global_declarations;
mod c_init_info;
mod c_instr;
mod c_lhost;
mod c_location;
mod c_lval;
mod c_offset;
mod c_stmt;
mod c_typ;
mod c_type_info;
mod c_var_info;
mod index_manager;

pub fn module(py: Python) -> PyResult<Bound<PyModule>> {
    let module = PyModule::new_bound(py, "app")?;
    module.add_submodule(&assign_dictionary_record::module(py)?)?;
    module.add_submodule(&c_application::module(py)?)?;
    module.add_submodule(&c_attributes::module(py)?)?;
    module.add_submodule(&c_const::module(py)?)?;
    module.add_submodule(&c_context::module(py)?)?;
    module.add_submodule(&c_context_dictionary::module(py)?)?;
    module.add_submodule(&c_comp_info::module(py)?)?;
    module.add_submodule(&c_declarations::module(py)?)?;
    module.add_submodule(&c_dictionary::module(py)?)?;
    module.add_submodule(&c_dictionary_record::module(py)?)?;
    module.add_submodule(&c_enum_info::module(py)?)?;
    module.add_submodule(&c_enum_item::module(py)?)?;
    module.add_submodule(&c_exp::module(py)?)?;
    module.add_submodule(&c_field_info::module(py)?)?;
    module.add_submodule(&c_file::module(py)?)?;
    module.add_submodule(&c_file_assignment::module(py)?)?;
    module.add_submodule(&c_file_assignment_dictionary::module(py)?)?;
    module.add_submodule(&c_file_declarations::module(py)?)?;
    module.add_submodule(&c_function::module(py)?)?;
    module.add_submodule(&c_global_declarations::module(py)?)?;
    module.add_submodule(&c_init_info::module(py)?)?;
    module.add_submodule(&c_instr::module(py)?)?;
    module.add_submodule(&c_lhost::module(py)?)?;
    module.add_submodule(&c_lval::module(py)?)?;
    module.add_submodule(&c_location::module(py)?)?;
    module.add_submodule(&c_offset::module(py)?)?;
    module.add_submodule(&c_stmt::module(py)?)?;
    module.add_submodule(&c_typ::module(py)?)?;
    module.add_submodule(&c_type_info::module(py)?)?;
    module.add_submodule(&c_var_info::module(py)?)?;
    module.add_submodule(&index_manager::module(py)?)?;
    Ok(module)
}
